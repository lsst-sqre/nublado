[project]
# https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
name = "rubin.nublado.inithome"
description = "Home directory provisioner for Nublado."
license = { file = "LICENSE" }
readme = "README.md"
keywords = ["rubin", "lsst"]
# https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Natural Language :: English",
    "Operating System :: POSIX",
    "Typing :: Typed",
]
requires-python = ">=3.12"
# Dependencies in requirements/main.txt (empty) and requirements/dev.txt
dependencies = []
dynamic = ["version"]

[project.urls]
Homepage = "https://nublado.lsst.io"
Source = "https://github.com/lsst-sqre/nublado"

[build-system]
requires = ["setuptools>=61", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = 'setuptools.build_meta'

[project.scripts]
inithome = "rubin.nublado.inithome.main:main"

[tool.setuptools_scm]
root = ".."

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "strict"
# The python_files setting is not for test detection (pytest will pick up any
# test files named *_test.py without this setting) but to enable special
# assert processing in any non-test supporting files under tests.  We
# conventionally put test support functions under tests.support and may
# sometimes use assert in test fixtures in conftest.py, and pytest only
# enables magical assert processing (showing a full diff on assert failures
# with complex data structures rather than only the assert message) in files
# listed in python_files.
python_files = ["tests/*.py", "tests/*/*.py"]

[project]
# https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
name = "controller"
description = "Nublado Kubernetes controller for the Rubin Science Platform."
license = "MIT"
license-files = ["LICENSE"]
readme = "README.md"
keywords = ["rubin", "lsst"]
# https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Natural Language :: English",
    "Operating System :: POSIX",
    "Private :: Do Not Upload",
    "Typing :: Typed",
]
requires-python = ">=3.13"
dependencies = [
    "aiojobs",
    "bitmath",
    "google-cloud-artifact-registry",
    "httpx",
    "fastapi>=0.100",
    "jinja2",
    "kubernetes-asyncio",
    "pydantic>2",
    "pydantic-settings",
    "pyyaml",
    "safir[kafka,kubernetes]>=14",
    "semver",
    "sse-starlette",
    "sentry_sdk",
    "uvicorn[standard]",
]
dynamic = ["version"]

[project.scripts]
controller = "controller.cli:main"

[project.urls]
Homepage = "https://nublado.lsst.io"
Source = "https://github.com/lsst-sqre/nublado"

[build-system]
requires = ["setuptools>=61", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[dependency-groups]
dev = [
    "anys",
    "asgi-lifespan",
    "coverage[toml]",
    "httpx-sse",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-sugar",
    "pytest-timeout",
    "respx",
]
typing = [
    "mypy>=1.15",
    "types-pyyaml>=6",
]

[tool.coverage.run]
parallel = true
branch = true
source = ["controller"]

[tool.coverage.paths]
source = ["src", ".tox/*/site-packages"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.mypy]
disallow_untyped_defs = true
disallow_incomplete_defs = true
ignore_missing_imports = true
local_partial_types = true
no_implicit_reexport = true
plugins = ["pydantic.mypy"]
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "strict"
# The python_files setting is not for test detection (pytest will pick up any
# test files named *_test.py without this setting) but to enable special
# assert processing in any non-test supporting files under tests.  We
# conventionally put test support functions under tests.support and may
# sometimes use assert in test fixtures in conftest.py, and pytest only
# enables magical assert processing (showing a full diff on assert failures
# with complex data structures rather than only the assert message) in files
# listed in python_files.
python_files = ["tests/*.py", "tests/*/*.py"]

[tool.setuptools_scm]
root = ".."

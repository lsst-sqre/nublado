# This file contains only the tool configuration for linters. The
# configuration for the component Python projects may be found in the
# pyproject.toml files in subdirectories.

[tool.black]
line-length = 79
target-version = ["py312"]
exclude = '''
/(
    \.eggs
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | build
  | dist
)/
'''
# Use single-quoted strings so TOML treats the string like a Python r-string
# Multi-line strings are implicitly treated by black as regular expressions

[tool.mypy]
disallow_untyped_defs = true
disallow_incomplete_defs = true
ignore_missing_imports = true
local_partial_types = true
no_implicit_reexport = true
plugins = ["pydantic.mypy"]
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

# The rule used with Ruff configuration is to disable every lint that has
# legitimate exceptions that are not dodgy code, rather than cluttering code
# with noqa markers. This is therefore a reiatively relaxed configuration that
# errs on the side of disabling legitimate lints.
#
# Reference for settings: https://beta.ruff.rs/docs/settings/
# Reference for rules: https://beta.ruff.rs/docs/rules/
[tool.ruff]
extend = "ruff-shared.toml"

[tool.ruff.lint.extend-per-file-ignores]
"controller/src/controller/constants.py" = [
    "S108",    # constructing /tmp paths for Kubernetes Pods
]
"controller/src/controller/handlers/**" = [
    "D103",    # FastAPI handlers should not have docstrings
]
"controller/src/controller/services/**" = [
    "S108",    # constructing /tmp paths for Kubernetes Pods
]
"noxfile.py" = [
    "T201",    # print makes sense as output from nox rules
]
"spawner/tests/**" = [
    "UP017",   # spawner has to support Python 3.10, UTC was added in 3.11
]
"*/tests/**" = [
    "C901",    # tests are allowed to be complex, sometimes that's convenient
    "D101",    # tests don't need docstrings
    "D103",    # tests don't need docstrings
    "PLR0124", # these tests are required to test ordering dunder methods
    "PLR0915", # tests are allowed to be long, sometimes that's convenient
    "PT012",   # way too aggressive about limiting pytest.raises blocks
    "S101",    # tests should use assert
    "S106",    # tests are allowed to hard-code dummy passwords
    "SLF001",  # tests are allowed to access private members
]

[tool.ruff.lint.isort]
known-first-party = [
    "controller",
    "rubin.nublado.authenticator",
    "rubin.nublado.client",
    "rubin.nublado.inithome",
    "rubin.nublado.spawner",
    "tests",
]

[tool.scriv]
categories = [
    "Backwards-incompatible changes",
    "New features",
    "Bug fixes",
    "Other changes",
]
entry_title_template = "{{ version }} ({{ date.strftime('%Y-%m-%d') }})"
format = "md"
md_header_level = "2"
new_fragment_template = "file:changelog.d/_template.md.jinja"
skip_fragments = "_template.md.jinja"

name: CI

env:
  # Current supported uv version. The uv documentation recommends pinning
  # this. The version should match the version used in .pre-commit-config.yaml
  # and frozen in uv.lock. It is updated by make update-deps.
  UV_VERSION: "0.8.23"

"on":
  merge_group: {}
  pull_request: {}
  push:
    branches-ignore:
      # These should always correspond to pull requests, so ignore them for
      # the push trigger and let them be triggered by the pull_request
      # trigger, avoiding running the workflow twice. This is a minor
      # optimization so there's no need to ensure this is comprehensive.
      - "dependabot/**"
      - "gh-readonly-queue/**"
      - "renovate/**"
      - "t/**"
      - "tickets/**"
      - "u/**"
    tags:
      - "*"
  release:
    types: [published]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version-file: ".python-version"

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}

      - name: Run nox
        run: uv run --only-group=nox nox -s lint typing test

  # The test job tests everything with the latest Python version. The Nublado
  # client and the JupyterHub support code may additionally support older
  # Python versions and thus must be independently tested for those versions
  # using a matrix. Do not include the latest Python version in this matrix;
  # that will be tested above.
  test-client:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        python:
          - "3.12"

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}

      - name: Run nox
        run: uv run --only-group=nox nox -s typing test
        working-directory: client

  test-hub:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        python:
          - "3.12"

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}

      - name: Run nox
        run: uv run --only-group=nox nox -s typing test
        working-directory: hub

  docs:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v5
        with:
          # Ensure the documentation gets the right version.
          fetch-depth: 0

      - name: Filter paths
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            docs:
              - "CHANGELOG.md"
              - "docs/**"

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version-file: ".python-version"

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}

      - name: Install extra packages
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz

      - name: Run nox
        run: uv run --only-group=nox nox -s docs

      # Upload docs:
      # - on any push to main
      # - on pushes to tickets/ branches if docs/ directory content changed
      - name: Upload to LSST the Docs
        uses: lsst-sqre/ltd-upload@v1
        with:
          project: nublado
          dir: "docs/_build/html"
          username: ${{ secrets.LTD_USERNAME }}
          password: ${{ secrets.LTD_PASSWORD }}
        if: >
          (github.event_name == 'push' && github.ref_name == 'main')
          || (github.event_name == 'pull_request'
              && (startsWith(github.head_ref, 'tickets/')
                  || startsWith(github.head_ref, 't/'))
              && steps.filter.outputs.docs == 'true')

  linkcheck:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v5
        with:
          # Ensure the documentation gets the right version.
          fetch-depth: 0

      - name: Filter paths
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            docs:
              - "CHANGELOG.md"
              - "docs/**"

      - name: Set up Python
        if: steps.filter.outputs.docs == 'true'
        uses: actions/setup-python@v6
        with:
          python-version-file: ".python-version"

      - name: Install uv
        if: steps.filter.outputs.docs == 'true'
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}

      - name: Update package lists
        if: steps.filter.outputs.docs == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz

      - name: Run nox
        if: steps.filter.outputs.docs == 'true'
        run: uv run --only-group=nox nox -s docs-linkcheck

  build:
    runs-on: ubuntu-latest
    needs: [test, test-hub]
    timeout-minutes: 30

    # Only do Docker builds of tagged releases and pull requests from ticket
    # branches. This will still trigger on pull requests from untrusted
    # repositories whose branch names match our tickets/* branch convention,
    # but in this case the build will fail with an error since the secret
    # won't be set.
    if: >
      (github.event_name != 'merge_group'
       && startsWith(github.head_ref, 'tickets/'))

    strategy:
      # make 'latest' true if you want to also tag release builds with
      #   'latest'.
      # make 'gar' true if you want to also upload to Google Artifact
      #   Registry.
      matrix:
        container:
          - name: "controller"
            latest: false
            gar: false
          - name: "jupyterhub"
            latest: false
            gar: false
          - name: "inithome"
            latest: false
            gar: true
          - name: "purger"
            latest: false
            gar: true
          - name: "jupyterlab-base"
            latest: true
            gar: false
          - name: "fsadmin"
            latest: false
            gar: false
          - name: "repo-cloner"
            latest: false
            gar: true

    steps:
      - uses: actions/checkout@v5
        with:
          # Full history is required for setuptools_scm versioning.
          fetch-depth: 0

      - name: Log in to Google Artifact Repository
        uses: docker/login-action@v3
        if: ${{ matrix.container.gar }}
        with:
          registry: us-central1-docker.pkg.dev
          username: "_json_key_base64"
          password: ${{ secrets.GAR_PUSH_TOKEN }}

      - uses: lsst-sqre/build-and-push-to-ghcr@v1
        id: build-container
        with:
          dockerfile: Dockerfile.${{ matrix.container.name }}
          image: ${{ github.repository }}-${{ matrix.container.name }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # Add "latest" tag only if it's a release tag and if 'latest'
          # is set
          additional-tags: ${{ matrix.container.latest && startsWith(github.ref, 'refs/tags/') && 'latest' || '' }}

      - name: Docker meta
        id: build-meta
        uses: docker/metadata-action@v5
        if: ${{ matrix.container.gar }}
        with:
          images: |
            us-central1-docker.pkg.dev/rubin-shared-services-71ec/sciplat/${{ matrix.container.name }}
          tags: ${{ matrix.container.latest && format('type=raw,{0},latest',steps.build-container.outputs.tag) || format('type=raw,{0}',steps.build-container.outputs.tag) }}

      - name: Build and push to GAR
        uses: docker/build-push-action@v6
        if: ${{ matrix.container.gar }}
        with:
          context: "."
          file: Dockerfile.${{ matrix.container.name }}
          push: "true"
          tags: ${{ steps.build-meta.outputs.tags }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Report result
        run: |
          echo Pushed ghcr.io/${{ github.repository }}-${{ matrix.container.name }}:${{ steps.build-controller.outputs.tag }}

  test-packaging:
    name: Test packaging
    timeout-minutes: 5
    runs-on: ubuntu-latest
    needs: [test, test-client, docs]

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0 # full history for setuptools_scm

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}

      - name: Build the package
        run: uv build --no-sources
        working-directory: client

  pypi:
    name: Upload release to PyPI
    runs-on: ubuntu-latest

    timeout-minutes: 10
    needs: [test, test-client, docs, test-packaging]
    environment:
      name: pypi
      url: https://pypi.org/p/rubin-nublado-client
    permissions:
      id-token: write
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0 # full history for setuptools_scm

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}

      - name: Build the package
        run: uv build --no-sources
        working-directory: client

      - name: Publish the package
        run: uv publish
        working-directory: client
